{"version":3,"sources":["TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","this","props","id","item","onRemove","onUpdate","className","onClick","Component","App","todoItemCounter","state","clicks","setState","disabled","alert","onChangeItem","event","target","value","onChangeNewItem","newItem","onSubmit","preventDefault","items","showCtr","showUpt","ids","filter","index","newItems","placeholder","onChange","saveUpdate","map","key","removeTodo","update","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.227f4d2c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class TodoList extends Component {\r\n  \r\n\r\n   render() {\r\n    let {id,item,onRemove, onUpdate} = this.props; \r\n    return(\r\n      <li>\r\n      {item} <button className=\"btnLI\" onClick={() => onRemove(id)}>Delete</button> <button  onClick={() => onUpdate()}>Update</button>\r\n      \r\n      </li>\r\n    )\r\n    \r\n   }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: '',\n      item: '',\n      items: [],\n      showCtr: true,\n      showUpt: false,\n      clicks: 0,\n      disabled: false,\n      ids: 0\n    };\n  }\n\n  todoItemCounter = () => {\n    \n    if (this.state.clicks >= 5) {\n      this.setState({ disabled: true });\n      this.setState({ item: '' });\n      alert('Cant add more task')\n    }\n  }\n\n  onChangeItem = (event) => {\n    this.setState({ item: event.target.value });\n  }\n\n  onChangeNewItem = (event) => {\n    this.setState({ newItem: event.target.value });\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.item !== '') {\n      this.setState({\n        item: '',\n        items: [...this.state.items, this.state.item]\n      });\n      this.setState({ clicks: this.state.clicks + 1 });\n    } else {\n      alert('Please input a task');\n    }\n  }\n\n  removeTodo(id) {\n    //console.log(\"Delete todo index\", id);\n    let items = this.state.items.filter((item, index) => {\n      return id !== index\n    })\n\n    this.setState({\n      items: items\n    })\n\n    this.setState({ clicks: this.state.clicks - 1 });\n    this.setState({ disabled: false });\n\n  }\n\n  saveUpdate(index) {\n    const newItems = [...this.state.items];\n    newItems[this.state.ids] = this.state.newItem\n    if (this.state.newItem !== '') {\n      this.setState({ items:newItems });\n      this.setState({showUpt: false});\n    } else {\n      alert('Please input a task');\n    }\n  }\n\n  update(index,item) {\n    this.setState({newItem: item})\n    this.setState({ids: index});\n    this.setState({showUpt: true});\n    \n  }\n\n  \n\n\n  render() {\n    return (\n      <div>\n        <h1>React Todo List Application</h1>\n        <form className=\"App\" onSubmit={this.onSubmit}>\n          <input placeholder=\"Save task\" value={this.state.item} onChange={this.onChangeItem} disabled={this.state.disabled} />\n          <button onClick={this.todoItemCounter} disabled={this.state.disabled}>Save</button>\n        </form>  \n        \n        \n          {this.state.showCtr ? <h2>You have {this.state.clicks} task</h2> : ''}\n          \n          <div className=\"cat\">\n          {this.state.showUpt ? <input placeholder=\"Update task\" value={this.state.newItem} onChange={this.onChangeNewItem} /> : ''}\n\n          {this.state.showUpt ? <button id=\"buttonUp\"onClick={() => this.saveUpdate()}>Save Update</button> : ''}\n          </div>\n        <div className=\"containerBox\">\n        \n          <ul>\n            {this.state.items.map((item, index) => {\n              return (<TodoList id={index} key={index} item={item} onRemove={() => this.removeTodo(index)} onUpdate={() => this.update(index,item)}/> )  \n            })}       \n          </ul>\n        </div>\n\n      </div>\n    );\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}